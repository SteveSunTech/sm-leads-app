{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from './subAlert';\nimport { AM_BASIC_NEW } from './types'; // // Lookup wechat from database\n// export const single = ( wechat ) => async dispatch => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   }\n//   const body = JSON.stringify({ wechat });\n//   try {\n//     const res = await axios.post('/api/basic/single', body, config)\n//     console.log(res);\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n// Upload wechat client to database\n\nexport const newBasic = (email, password, name, college) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password,\n    name,\n    college\n  });\n\n  try {\n    const res = await axios.post('/api/am/basic/new', body, config);\n    const payload = res.data.user; // console.log(payload)\n\n    dispatch({\n      type: AM_BASIC_NEW,\n      payload\n    });\n    dispatch(setAlert(`校园大使：${payload.name}， 创建成功！`, 'success'));\n  } catch (err) {\n    console.log(err);\n\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n      }\n    } else {\n      dispatch(setAlert(err, 'error'));\n    }\n  }\n}; // get all wechat lead account belong to current user\n\nexport const getAllBasic = () => async dispatch => {\n  try {\n    const res = await axios.get('api/am/basic/index'); // console.log(res.data.wechats)\n\n    return new Promise(resolve => {\n      resolve(res.data.basics);\n    });\n  } catch (err) {\n    console.log(err);\n\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n      }\n    } else {\n      dispatch(setAlert(err, 'error'));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mingkun/Desktop/student medicover/salesApp/client/src/actions/am.js"],"names":["axios","setAlert","AM_BASIC_NEW","newBasic","email","password","name","college","dispatch","config","headers","body","JSON","stringify","res","post","payload","data","user","type","err","console","log","response","errors","forEach","error","msg","getAllBasic","get","Promise","resolve","basics"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,SACEC,YADF,QAEO,SAFP,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAEC,KAAF,EAASC,QAAT,EAAmBC,IAAnB,EAAyBC,OAAzB,KAAsC,MAAMC,QAAN,IAAkB;AAC9E,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAET,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA;AAAzB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,mBAAX,EAAgCJ,IAAhC,EAAsCF,MAAtC,CAAlB;AACA,UAAMO,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASC,IAAzB,CAFE,CAIF;;AAEAV,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEjB,YADC;AAEPc,MAAAA;AAFO,KAAD,CAAR;AAKAR,IAAAA,QAAQ,CACNP,QAAQ,CAAE,QAAOe,OAAO,CAACV,IAAK,SAAtB,EAAgC,SAAhC,CADF,CAAR;AAKD,GAhBD,CAgBE,OAAOc,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,QAAIA,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO,MAAtB,EAA8B;AAC5B,YAAMA,MAAM,GAAGJ,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO,MAAjC;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIlB,QAAQ,CAACP,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,OAAZ,CAAT,CAAhC;AACD;AACF,KALD,MAKO;AACLnB,MAAAA,QAAQ,CAACP,QAAQ,CAACmB,GAAD,EAAM,OAAN,CAAT,CAAR;AACD;AACF;AACF,CApCM,C,CAsCP;;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAM,MAAMpB,QAAN,IAAkB;AAEjD,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMd,KAAK,CAAC6B,GAAN,CAAU,oBAAV,CAAlB,CADE,CAEF;;AACA,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BA,MAAAA,OAAO,CAACjB,GAAG,CAACG,IAAJ,CAASe,MAAV,CAAP;AACD,KAFM,CAAP;AAID,GAPD,CAOE,OAAOZ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,QAAIA,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO,MAAtB,EAA8B;AAC5B,YAAMA,MAAM,GAAGJ,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO,MAAjC;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIlB,QAAQ,CAACP,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,OAAZ,CAAT,CAAhC;AACD;AACF,KALD,MAKO;AACLnB,MAAAA,QAAQ,CAACP,QAAQ,CAACmB,GAAD,EAAM,OAAN,CAAT,CAAR;AACD;AACF;AACF,CApBM","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from './subAlert'\n\nimport {\n  AM_BASIC_NEW\n} from './types';\n\n// // Lookup wechat from database\n// export const single = ( wechat ) => async dispatch => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   }\n\n//   const body = JSON.stringify({ wechat });\n\n//   try {\n//     const res = await axios.post('/api/basic/single', body, config)\n//     console.log(res);\n\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n\n// Upload wechat client to database\nexport const newBasic = ( email, password, name, college ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ email, password, name, college });\n\n  try {\n    const res = await axios.post('/api/am/basic/new', body, config)\n    const payload = res.data.user\n\n    // console.log(payload)\n\n    dispatch({\n      type: AM_BASIC_NEW,\n      payload\n    })\n\n    dispatch(\n      setAlert(`校园大使：${payload.name}， 创建成功！`, 'success')\n    )\n\n\n  } catch (err) {\n    console.log(err)\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n      }\n    } else {\n      dispatch(setAlert(err, 'error'))\n    }\n  }\n}\n\n// get all wechat lead account belong to current user\nexport const getAllBasic = () => async dispatch => {\n\n  try {\n    const res = await axios.get('api/am/basic/index')\n    // console.log(res.data.wechats)\n    return new Promise(resolve => {\n      resolve(res.data.basics)\n    })\n\n  } catch (err) {\n    console.log(err)\n    if (err.response.data.errors) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n      }\n    } else {\n      dispatch(setAlert(err, 'error'))\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}